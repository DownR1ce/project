#include <iostream>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <unistd.h>
#include <vector>
#include <string>
#ifdef _WIN32
    #include <windows.h>
    #include <conio.h>
    #define SLEEP(ms) Sleep(ms)
    #define CLEAR_SCREEN() system("cls")
    #define GETCH() _getch()
#else
    #include <termios.h>
    #define SLEEP(ms) usleep(ms * 1000)
    #define CLEAR_SCREEN() system("clear")
    char getch() {
        struct termios oldt, newt;
        char ch;
        tcgetattr(STDIN_FILENO, &oldt);
        newt = oldt;
        newt.c_lflag &= ~(ICANON | ECHO);
        tcsetattr(STDIN_FILENO, TCSANOW, &newt);
        ch = getchar();
        tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
        return ch;
    }
    #define GETCH() getch()
#endif

using namespace std;

// The title is generated by https://www.ascii-art-generator.org/
void DisplayTitle() {
    string line;
    ifstream fin;
    fin.open("GameTitle.txt");
    while (getline(fin, line)){
        cout << line << endl;
        usleep(250000);
    }
    cout << "\033[32m-Welcome to Terminal Intruder! The maze has been waiting for you-\033[0m" << endl;
    cout << endl;
    fin.close();
}

// Four options in the home page
void GameChoice() {
    cout << "\033[46mN\033[0m: New Game" << endl;
    cout << "\033[44mS\033[0m: Saved Game" << endl;
    cout << "\033[30;47mT\033[0m: Helpful Tips" << endl;
    cout << "\033[43mQ\033[0m: Quit" << endl;
    
    cout << endl << "\033[3mWhere do you want to start your adventure?\033[0m" << endl;
    cout << endl << "\033[2mChoices are case-insensitive: Both 'N' and 'n' are fine.\033[0m" << endl;
    cout << endl;
} 

// Structure for linking different parts of the game
void HomePage(){
    DisplayTitle();
    GameChoice();

    char choice; 
    cin >> choice;
    
    while (choice != 'Q' && choice != 'q') {
        if (choice == 'N' || choice == 'n') {
            // links to new game
        } else if (choice == 'S' || choice == 's') {
            // links to saved game
        } else if (choice == 'T' || choice == 't') {
            // links to tips
        } else {
            cout << "Invalid starting point. Please try again." << endl;
        }
        cin >> choice;
    }
    
    cout << endl << "\033[3mHope to See You Soon!\033[0m" << endl;
}

void setColor(int color) {
    #ifdef _WIN32
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
    #else
        const char* colors[] = {"\033[30m", "\033[31m", "\033[32m", "\033[33m", "\033[34m", "\033[35m", "\033[36m", "\033[37m"};
        cout << colors[color % 8];
    #endif
}

void initConsole() {
    #ifdef WIN32
        system("mode con cols=60 lines=30");
    #endif
    CLEAR_SCREEN();
}

// Provide random tips for players to kill time while they're waiting
string random_tips() {
    vector <string> lines = {
        "You will discover that after finishing reading this line you can start to play the game.",
        "Still confused about the game? Check out our introductory video and see if you'll get inspired!",
        "Thanks for playing the game and have fun in the maze!",
        "Find the game a bit hard? Try seeking tips at home page of the game.",
        "There are actually treasures in the maze. Don't forget to find them while getting out of levels!",
        "Get stuck in the previous level? How about start a new game to refresh your mind?",
        "Fun fact: Harry Potter's Triwizard Maze in Goblet of Fire was inspired by English garden mazes.",
        "Fun fact: Hall of Mirrors mazes use angled mirrors to create infinite reflections.",
        "Find anything fun in the maze? If so, well done!",
        "Get ready for exploring the maze?"
    };
    
    srand(static_cast<unsigned int>(time(0)));
    int randomIndex = rand() % lines.size();
    return lines[randomIndex];

}

// Main body of the loading process
void showLoadingBar() {
    setColor(8); // Gray
    cout << "[";
    for (int i = 0; i < 20; i++) {
        setColor(10 + (i % 2)); // Blinking green
        cout << "â– ";
        SLEEP(50 + rand() % 100);
    }
    setColor(8);
    cout << "]" << endl;
    setColor(7); // White
}
void showLoadingScreen() {
    initConsole();
    srand(time(0));
    
    setColor(11);
    cout << "\n\n Preparing maze adventure...\n\n";
    
    showLoadingBar();
    
    setColor(14);
    cout << "\n Loading complete!\n";
    SLEEP(500);
    
    setColor(7);
    cout << "\n Press any key to continue...";
    GETCH();
}

int main() {
    showLoadingScreen();
    HomePage();
    return 0;
}
